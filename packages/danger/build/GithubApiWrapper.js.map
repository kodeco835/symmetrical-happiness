{"version":3,"file":"GithubApiWrapper.js","sourceRoot":"","sources":["../src/GithubApiWrapper.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * According to http://www.levibotelho.com/development/commit-a-file-with-the-github-api\n * Base on https://github.com/orta/memfs-or-file-map-to-github-branch\n */\nimport { Octokit } from '@octokit/rest';\n\n/**\n * The file map contains files content as a value and path as a key.\n * For example:\n * {\n *    'packages/expo-image-picker/CHANGELOG.md': '# Changelog',\n *    'CHANGELOG.md'  : '# Changelog'\n * }\n */\ntype FileMap = Record<string, string>;\n\nexport type CreateBranchOptions = {\n  /*\n   * The name of the new branch.\n   */\n  branchName: string;\n  /*\n   * The name of the base branch.\n   */\n  baseBranchName: string;\n  /*\n   * Message for the commit\n   */\n  message: string;\n};\n\nexport type PRReferences = {\n  /*\n   * The name of the branch, which is the PR's target (head of this PR).\n   */\n  fromBranch: string;\n  /*\n   * The name of the branch, which is the base of this PR (base of this PR).\n   */\n  toBranch: string;\n};\n\nexport type CreatePROptions = PRReferences & {\n  /*\n   * The PR's title.\n   */\n  title: string;\n  /*\n   * The PR's body.\n   */\n  body: string;\n};\n\nexport class GithubApiWrapper {\n  private userInfo: { owner: string; repo: string };\n\n  constructor(private api: Octokit, owner: string, repo: string) {\n    this.userInfo = {\n      owner,\n      repo,\n    };\n  }\n\n  /**\n   * Creates or updates branch from the file map.\n   *\n   * If the branch exists it will be overwritten (similar behavior to git push --force).\n   */\n  async createOrUpdateBranchFromFileMap(\n    fileMap: FileMap,\n    config: CreateBranchOptions\n  ): Promise<Octokit.Response<Octokit.GitUpdateRefResponse | Octokit.GitCreateRefResponse>> {\n    const baseBranchRef = `heads/${config.baseBranchName}`;\n    const branchRef = `heads/${config.branchName}`;\n\n    const baseSha = await this.getBaseShaForNewBranch(baseBranchRef);\n    const tree = await this.createTree(fileMap, baseSha);\n\n    const commit = await this.api.git.createCommit({\n      ...this.userInfo,\n      message: config.message,\n      tree: tree.sha,\n      parents: [baseSha],\n    });\n\n    return this.updateOrCreateReference(commit.data.sha, branchRef);\n  }\n\n  /**\n   * Gets currently opened PRs, which are from `ref.fromBranch` to `ref.toBranch`.\n   */\n  async getOpenPRs(ref: PRReferences): Promise<Octokit.PullsListResponse> {\n    const { data: prs } = await this.api.pulls.list({\n      ...this.userInfo,\n      state: 'open',\n      base: ref.toBranch,\n      head: ref.fromBranch,\n    });\n    return prs;\n  }\n\n  /**\n   * Creates a PR as a user, which was provided in the constructor.\n   */\n  async openPR(options: CreatePROptions): Promise<Octokit.PullsCreateResponse> {\n    const { data: pr } = await this.api.pulls.create({\n      ...this.userInfo,\n      base: options.toBranch,\n      head: options.fromBranch,\n      title: options.title,\n      body: options.body,\n    });\n\n    return pr;\n  }\n  /**\n   * A Git tree object creates the hierarchy between files in a Git repository. To create a tree\n   * we need to make a list of blobs (which represent changes to the FS)\n   *\n   * We want to build on top of the tree that already exists at the latest sha\n   *\n   * @see https://developer.github.com/v3/git/trees/\n   */\n  private async createTree(\n    fileMap: FileMap,\n    baseSha: string\n  ): Promise<Octokit.GitCreateTreeResponse> {\n    const createBlobs = Object.entries(fileMap).map(([filename, content]) =>\n      this.api.git.createBlob({ ...this.userInfo, content }).then(blob => ({\n        sha: blob.data.sha,\n        path: filename,\n        mode: '100644',\n        type: 'blob',\n      }))\n    );\n\n    const blobs = await Promise.all(createBlobs);\n    const tree = await this.api.git.createTree({\n      ...this.userInfo,\n      tree: blobs as Octokit.GitCreateTreeParamsTree[],\n      base_tree: baseSha,\n    });\n    return tree.data;\n  }\n\n  /**\n   * Gets the base sha for the new branch which will be on the top of the provided one.\n   *\n   * @param branchRef The ref in the URL must `heads/branch`, not just `branch`\n   */\n  private async getBaseShaForNewBranch(branchRef: string): Promise<string> {\n    const ref = await this.api.git.getRef({\n      ...this.userInfo,\n      ref: branchRef,\n    });\n    return ref.data.object.sha;\n  }\n\n  /**\n   * Creates or updates the git's reference pointing to the provided commit.\n   * If this reference exists, it will be overwritten (similar behavior to git push --force).\n   *\n   * A Git reference (git ref) is just a file that contains a Git commit SHA-1 hash. When referring\n   * to a Git commit, you can use the Git reference, which is an easy-to-remember name, rather than\n   * the hash. The Git reference can be rewritten to point to a new commit.\n   *\n   * @param ref The ref in the URL must `heads/branch`, not just `branch`\n   *\n   * @see https://developer.github.com/v3/git/refs/#git-references\n   */\n  private async updateOrCreateReference(\n    commitSha: string,\n    ref: string\n  ): Promise<Octokit.Response<Octokit.GitUpdateRefResponse | Octokit.GitCreateRefResponse>> {\n    const branchExists = await this.checkIfRefExists(ref);\n    if (branchExists) {\n      return this.api.git.updateRef({\n        ...this.userInfo,\n        ref,\n        force: true,\n        sha: commitSha,\n      });\n    }\n\n    return this.api.git.createRef({\n      ...this.userInfo,\n      ref: `refs/${ref}`,\n      sha: commitSha,\n    });\n  }\n\n  /**\n   * Checks if the reference exists via Github api.\n   *\n   * @param ref The ref in the URL must `heads/branch`, not just `branch`\n   */\n  private async checkIfRefExists(ref: string): Promise<boolean> {\n    try {\n      await this.api.git.getRef({ ...this.userInfo, ref });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n"]}